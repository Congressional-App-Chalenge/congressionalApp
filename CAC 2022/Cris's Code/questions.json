[
    {
        "topic": "logic and conditionals",
    "question": "Which of the following code segments is equivalent to the code below?\n\n if (x >= 1) \n    x = x * 3;\nif (x > 3)\n     x = 0;",
    "choice1": "x = 0;",
    "choice2": "if (x > 1) x = 0;",
    "choice3": "if (x > 3) x = 0;",
    "choice4": "if (x >=1) x = 0;",
    "choice5": "none of the above",
    "answer": 5
    },
    {
        "topic": "inheritance and overriding",
    "question": "public class Student {\npublic String getFood() {\nreturn 'Pizza';\n}\npublic String getInfo() {\nreturn 'Studying';\n}\n}\npublic class GradStudent extends Student {\npublic String getFood() {\nreturn 'Taco';\n}\npublic String getInfo() {\nsuper.getInfo();\nreturn 'Eating';\n}\n}\n\n What is printed when the following code is executed? \n\nStudent s = new GradStudent();\nSystem.out.println(s.getInfo());",
    "choice1": "Pizza",
    "choice2": "Taco",
    "choice3": "Studying",
    "choice4": "Eating",
    "choice5": "Studying Eating",
    "answer": 4
    },
    {
        "topic": "1-d arrays and prog fund",
    "question": "Given the following code, which of the answers best describes the conditions needed for temp to be true when it is returned?\n\n boolean temp = false;\nint count = 0;\nfor (int testVal : a)\n{\nif (testVal == val)\n{\ntemp = true;\nreturn temp;\n}\n}\nreturn temp;",
    "choice1": "Whenever the first element in a is equal to val",
    "choice2": "Whenever a contains any element which equals val.",
    "choice3": "Whenever more than 1 element in a is equal to val.",
    "choice4": "Whenever exactly 1 element in a is equal to val.",
    "choice5": "Whenever the last element in a is equal to val.",
    "answer": 2
    },
    {
        "topic": "list processing",
    "question": "Consider the following code segment.\n\n List<String> list = new ArrayList<String>();\nlist.add('a');\nlist.add('b');\nlist.set(1,'c');\nlist.add(2, 'd');\nlist.set(2, 'e');\nlist.add('g');\nSystem.out.println(list);\n\n What is printed as a result of executing the code segment?",
    "choice1": "[a, c, e, d, g]",
    "choice2": "[c, e, d, b, g]",
    "choice3": "[a, c, e, g]",
    "choice4": "[a, b, e, d, g]",
    "choice5": "[a, c, e, d, b, g]",
    "answer": 3
    },
    {
        "topic": "constructors and inheritance",
    "question": "Given the following class declarations:\n\n public class Car {\nprivate String make;\npublic Car(String theMake)\n {\nmake = theMake; \n}\n public String getMake() {\nreturn make;\n}\n}\npublic class ElectricCar extends Car {\npublic ElectricCar() {\nsuper( 'Ford');\n}\n public ElectricCar(String theMake) {\nsuper(theMake);\n}\n}",
    "choice1": "Car myCar = new Car();",
    "choice2": "Car myCar1 = new ElectricCar();",
    "choice3": "ElectricCar myCar2 = new ElectricCar('Ford');",
    "choice4": "Car myCar3 = new Car('Ford');",
    "choice5": "Car myCar4 = new ElectricCar('Toyota');",
    "answer": 1
    },
    {
        "topic": "oop concepts",
    "question": "Given the following declarations.\n \npublic class Vehicle {\npublic void test(Car x, SportsCar y) {}\n}\npublic class Car extends Vehicle {}\npublic class SportsCar extends Car {} \n\nAlso consider the following code that appears in a different class. \n\nVehicle v = new Vehicle();\nCar c = new Car();\nSportsCar sporty = new SportsCar();",
    "choice1": "v.test(sporty,v);",
    "choice2": "sporty.test(c,c);",
    "choice3": "v.test(sporty,c);",
    "choice4": "sporty.test(sporty,v);",
    "choice5": "c.test(sporty,sporty);",
    "answer": 5
    },
    {
        "topic": "complex conditional, logic, and DeMorgans",
    "question": "When is the following Boolean expression true (a and b are integers)? \n\n (a < b) && !(b > a)",
    "choice1": "Always true",
    "choice2": "Never true",
    "choice3": "a = b",
    "choice4": "a < b",
    "choice5": "a > b",
    "answer": 2
    },
    {
        "topic": "selection sort with missing code",
    "question": "The following incomplete method is intended to sort the array a in ascending order. \n\npublic void sort() {\nint maxCompare = a.length - 1;\nint lIndex = 0;\nint temp = 0;\nfor (int i = maxCompare; i > 0; i--) {\nlIndex = i;\nfor ( /* missing code */ ) {\nif (a[j] > a[lIndex]) {\nlIndex = j;\n}\n}\ntemp = a[i];\na[i] = a[lIndex];\na[lIndex] = temp;\n}\n}\n\n Which of the following could be used to replace /* missing code */ in the code above so that the method always sorts the array a in ascending order?",
    "choice1": "int j = i -1; j >=0; j--",
    "choice2": "int j = i +1; j < a.length; j++",
    "choice3": "int j = i; j < a.length; j++",
    "choice4": "int j = i; j >=0; j--",
    "choice5": "int j = i -1; j >0; j--",
    "answer": 1
    },

    {
        "topic": "2D array",
    "question": "Given the following method and what would the result be when m is executed? \n\npublic void m(int[][]p) \n{\nint height = p.length;\nfor (int row = 0; row < height / 2; row++) \n{\nfor (int col = 0; col <p[0].length; col++) {\np[row][col] = p[height - row - 1][col];\n}\n}\n}",
    "choice1": "Copies the values from the top half to the bottom half of the 2D array",
    "choice2": "Copies the values from the left halt to the right half of the 2D array",
    "choice3": "Copies the values from the bottom half to the top half of the 2D array",
    "choice4": "Copies the values from the right half to the left half of the 2D array",
    "choice5": "All values remain the same.",
    "answer": 3
    },
    
{
	"topic": "nested loops",
"question": "Consider the following code segment.\n\n int i = a random number such that 1 <= i <= n;\nfor (int a = 2; a <= i; a++)\nfor (int b = 1; b < i; b++)\nSystem.out.println( \"*\" );\n\n What is the minimum number of times that * will be printed?",
"choice1": "0",
"choice2": "1",
"choice3": "2",
"choice4": "n-1",
"choice5": "n-2",
"answer": 1
}


    
    
    
]